import heapq

class Task:
    def __init__(self, task_id, priority):
        self.task_id = task_id
        self.priority = -priority  # max-heap
        self.dependencies = set()
        self.dependents = set()
        self.completed = False

class TaskScheduler:
    def __init__(self):
        self.tasks = {}  # task_id -> Task
        self.available_tasks = []  # heap of executable tasks

    def add_task(self, task_id, priority, dependencies=None):
        if dependencies is None:
            dependencies = []
        if task_id in self.tasks:
            raise ValueError("Task ID already exists.")
        task = Task(task_id, priority)
        task.dependencies = set(dependencies)
        self.tasks[task_id] = task
        
        # update dependents of dependencies
        for dep in dependencies:
            if dep not in self.tasks:
                raise ValueError(f"Dependency {dep} does not exist.")
            self.tasks[dep].dependents.add(task_id)
        
        if not task.dependencies:
            heapq.heappush(self.available_tasks, (task.priority, task_id))
        print(f"Added task {task_id} with priority {priority} and dependencies {dependencies}")

    def complete_task(self, task_id):
        if task_id not in self.tasks:
            raise ValueError("Task does not exist.")
        task = self.tasks[task_id]
        task.completed = True
        print(f"Completed task {task_id}")
        
        # check dependents if they can now be executed
        for dep_id in task.dependents:
            dep_task = self.tasks[dep_id]
            dep_task.dependencies.discard(task_id)
            if not dep_task.dependencies and not dep_task.completed:
                heapq.heappush(self.available_tasks, (dep_task.priority, dep_id))

    def next_task(self):
        while self.available_tasks:
            _, task_id = heapq.heappop(self.available_tasks)
            task = self.tasks[task_id]
            if not task.completed:
                return task_id
        return None

    def print_tasks(self):
        print("All Tasks Status:")
        for task_id, task in self.tasks.items():
            print(f"{task_id}: priority={-task.priority}, completed={task.completed}, deps={list(task.dependencies)}")

# Example usage
scheduler = TaskScheduler()
scheduler.add_task("T1", 5)
scheduler.add_task("T2", 10, ["T1"])
scheduler.add_task("T3", 7)

print("Next task:", scheduler.next_task())  # T2 cannot run yet, T1 or T3
scheduler.complete_task("T1")
print("Next task:", scheduler.next_task())  # Now T2 can run
scheduler.complete_task("T3")
scheduler.complete_task("T2")
scheduler.print_tasks()
